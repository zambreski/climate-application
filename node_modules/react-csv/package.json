{
  "_from": "react-csv",
  "_id": "react-csv@1.1.2",
  "_inBundle": false,
  "_integrity": "sha512-pTOTYntW+gQWzCxyEGfS5ZeOfQw4Mu3B+DJd4jrJKNuAWFQ+EEyF2Earfg0+FVEkPwMr62OLtbYCHmc6vQWj2w==",
  "_location": "/react-csv",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-csv",
    "fetchSpec": "latest",
    "name": "react-csv",
    "raw": "react-csv",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-csv/-/react-csv-1.1.2.tgz",
  "_shasum": "6cb47e625f51878d24bb68a120efb45a30ad243a",
  "_spec": "react-csv",
  "_where": "/Users/sriegodedios/Development/senior project",
  "author": {
    "email": "http://abdennoor.com",
    "name": "Abdennour TOUMI"
  },
  "bugs": {
    "url": "https://github.com/react-csv/react-csv/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Build CSV files on the fly basing on Array/literal object of data ",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.18.2",
    "babel-istanbul": "^0.11.0",
    "babel-loader": "^6.2.8",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "browserify": "^13.3.0",
    "console-info": "0.0.4",
    "coveralls": "^2.11.15",
    "css-loader": "^0.26.1",
    "documentation": "^4.0.0-rc.1",
    "enzyme": "^2.8.2",
    "expect": "^1.20.2",
    "extract-text-webpack-plugin": "^1.0.1",
    "isparta-loader": "^2.0.0",
    "jsdom": "9.8.3",
    "jsdom-global": "2.1.0",
    "mocha": "^3.2.0",
    "mocha-lcov-reporter": "^1.2.0",
    "node-sass": "^4.5.3",
    "prop-types": "^15.5.8",
    "react": "^15.5.4",
    "react-docgen": "^2.13.0",
    "react-dom": "^15.5.4",
    "react-styleguidist": "^4.6.3",
    "react-test-renderer": "^15.5.4",
    "sass-loader": "^4.0.2",
    "sinon": "^1.17.6",
    "style-loader": "^0.13.1",
    "uglify-js": "^2.7.5",
    "webpack": "^1.13.3",
    "webpack-dev-middleware": "^1.8.4",
    "webpack-dev-server": "^1.16.2",
    "webpack-hot-middleware": "^2.13.2"
  },
  "homepage": "https://github.com/react-csv/react-csv#readme",
  "jsnext:main": "src/index.js",
  "keywords": [
    "ES7",
    "IE11",
    "IO",
    "babel",
    "component",
    "csv",
    "download",
    "excel",
    "file",
    "hyperlink",
    "react",
    "reuse"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "react-csv",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/abdennour/react-csv.svg?branch=master)](https://travis-ci.org/abdennour/react-csv)\n[![Coverage Status](https://coveralls.io/repos/github/abdennour/react-csv/badge.svg?branch=master)](https://coveralls.io/github/abdennour/react-csv?branch=master)\n\n![](https://raw.githubusercontent.com/rathath/bucket/master/img/react-csv.png)\n\n[![Build Status](https://travis-ci.org/abdennour/react-csv.svg?branch=master)](https://travis-ci.org/abdennour/react-csv)\n[![Coverage Status](https://coveralls.io/repos/github/abdennour/react-csv/badge.svg?branch=master)](https://coveralls.io/github/abdennour/react-csv?branch=master)\n\n# Overview :\n\nGenerate a CSV file from given data.\n\nThis data can be an array of arrays, an array of literal objects, or strings.\n\n# Example :\n\n```js\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nconst csvData = [\n  [\"firstname\", \"lastname\", \"email\"],\n  [\"Ahmed\", \"Tomi\", \"ah@smthing.co.com\"],\n  [\"Raed\", \"Labes\", \"rl@smthing.co.com\"],\n  [\"Yezzi\", \"Min l3b\", \"ymin@cocococo.com\"]\n];\n<CSVLink data={csvData}>Download me</CSVLink>;\n// or\n<CSVDownload data={csvData} target=\"_blank\" />;\n```\n\nFor more examples, see [here üëàüèº](http://react-csv.github.io/react-csv/)\n\n# Install\n\n```\nnpm install react-csv --save;\n```\n\nOr for non-node developers, you can use CDN directly:\n\n```html\n<script src=\"https://cdn.rawgit.com/abdennour/react-csv/6424b500/cdn/react-csv-latest.min.js\" type=\"text/javascript\"></script>\n```\n\n# Components:\n\nThis package includes two components: `CSVLink` and `CSVDownload`.\n\n## 0. Common Props:\n\nThe two components accept the following `Props`:\n\n### - **data** Props:\n\nA required property that represents the CSV data.\nThis data can be _array of arrays_, _array of literal objects_ or _string_.\n\n**Example of Array of arrays**\n\n```js\n// Array of arrays. Each item is rendered as a CSV line\ndata = [\n  [\"firstname\", \"lastname\", \"email\"],\n  [\"Ahmed\", \"Tomi\", \"ah@smthing.co.com\"],\n  [\"Raed\", \"Labes\", \"rl@smthing.co.com\"],\n  [\"Yezzi\", \"Min l3b\", \"ymin@cocococo.com\"]\n];\n```\n\n**Example of array of literal objects**\n\n```js\n// Array of literal objects. Each item is rendered as CSV line however the order of fields will be defined by the headers props. If the headers props are not defined, the component will generate headers from each data item.\ndata = [\n  { firstname: \"Ahmed\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" },\n  { firstname: \"Raed\", lastname: \"Labes\", email: \"rl@smthing.co.com\" },\n  { firstname: \"Yezzi\", lastname: \"Min l3b\", email: \"ymin@cocococo.com\" }\n];\n```\n\n**Example of strings**\n\n```js\n// A string can be used if the data is already formatted correctly\n\ndata = `firstname,lastname\nAhmed,Tomi\nRaed,Labes\nYezzi,Min l3b\n`;\n\n// or using 3rd party package\nimport json2csv from \"json2csv\";\ndata = json2csv(arrayOfLiteralObjects);\n```\n\n### - **headers** Props:\n\nSpecifying `headers` helps to define an order of the CSV fields. The csv content will be generated accordingly.\n\n> Notes :\n>\n> - The meaning of headers with data of type `Array` is to order fields AND prepend those headers at the top of the CSV content.\n> - The meaning of headers with data of type `String` data is only prepending those headers as the first line of the CSV content.\n\n##### Custom Header Labels\n\nCustom header labels can be used when converting data of type `Object` to CSV by having the header array itself be an array of literal objects of the form:\n\n```js\n{ label: /* Label to display at the top of the CSV */, key: /* Key to the data */ }\n```\n\nIf the header array is an array of strings, the header labels will be the same as the keys used to index the data objects.\n\nExample:\n\n```js\nimport { CSVLink } from \"react-csv\";\n\nheaders = [\n  { label: \"First Name\", key: \"firstname\" },\n  { label: \"Last Name\", key: \"lastname\" },\n  { label: \"Email\", key: \"email\" }\n];\n\ndata = [\n  { firstname: \"Ahmed\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" },\n  { firstname: \"Raed\", lastname: \"Labes\", email: \"rl@smthing.co.com\" },\n  { firstname: \"Yezzi\", lastname: \"Min l3b\", email: \"ymin@cocococo.com\" }\n];\n\n<CSVLink data={data} headers={headers}>\n  Download me\n</CSVLink>;\n```\n\n##### Nested JSON data\n\nIt is possible to reference nested strings in your data using dot notation\n\n```js\nheaders = [\n  { label: 'First Name', key: 'details.firstName' },\n  { label: 'Last Name', key: 'details.lastName' },\n  { label: 'Job', key: 'job' },\n];\n\ndata = [\n  { details: { firstName: 'Ahmed', lastName: 'Tomi' }, job: 'manager'},\n  { details: { firstName: 'John', lastName: 'Jones' }, job: 'developer'},\n];\n```\nNote: if at any point the nested keys passed do not exist then looks for key with dot notation in the object.\n\n### - **separator** Props:\n\nFollowing a request to add [this feature](https://github.com/react-csv/react-csv/issues/3) , from `1.0.1` release, `react-csv` supports `separator` props which is equals by default a comma `,` .\n\n```js\nimport { CSVLink } from \"react-csv\";\n\n<CSVLink data={array} separator={\";\"}>\n    Download me\n</CSVLink>\n\n/*\n    \"foo\";\"bar\"\n    \"a\";\"b\"\n */\n```\n\n### - **enclosingCharacter** Props:\n\nFollowing a request to add [this feature](https://github.com/react-csv/react-csv/issues/68), `react-csv` supports an `enclosingCharacter` prop which defaults to `\"`.\n\n\n```js\nimport {CSVLink} from 'react-csv';\n\n<CSVLink data={array} enclosingCharacter={`'`}>\n    Download me\n</CSVLink>\n\n/*\n    'foo','bar'\n    'a','b'\n */\n\n```\n\n## 1. CSVLink Component:\n\nIt renders a hyperlink and clicking on it will trigger the download action of the CSV document.\n\nIt does not accept only `data` and `headers` props, but it also renders all props of `HTMLAnchor` tag. (className, target,....)\n\n### - **filename** Props:\n\n`filename` is another props restricted to `CSVLink`. It specifies the filename of the downloaded CSV.\n\n**example**\n\n```js\nimport { CSVLink } from \"react-csv\";\n\n<CSVLink\n  data={data}\n  filename={\"my-file.csv\"}\n  className=\"btn btn-primary\"\n  target=\"_blank\"\n>\n  Download me\n</CSVLink>;\n```\n\n### - **onClick** Props:\n\n`onClick` is another props restricted to `CSVLink`.\n\nIf it is defined, it means 3 things:\n\n1 - It will run at the top of the click handling logic.\n2 - [Sync] If it returns an explicit `false`, the return will be interpreted as a claim to stop the click handling, then, the next logic will not be executed if so.\n3 - [Async] If it is async, \"done\" argument must be called if you want to invoke the handling of the component. (check examples below)\n4 - [Async] If it is async (includes api call, timeout,... ) and it calls done with `false` will be interpreted as a claim to stop the click handling, then, the next logic will not be executed if so.\n\n**examples**\n\n- üî¨ Sync + Proceed\n\n```js\nimport { CSVLink } from \"react-csv\";\n\n<CSVLink\n  data={data}\n  onClick={() => {\n    console.log(\"You click the link\"); // üëçüèª Your click handling logic\n  }}\n>\n  Download me\n</CSVLink>;\n```\n\n- üî¨ Sync + Don't Proceed\n\n```js\nimport { CSVLink } from \"react-csv\";\n\n<CSVLink\n  data={data}\n  onClick={event => {\n    console.log(\"You click the link\");\n    return false; // üëçüèª You are stopping the handling of component\n  }}\n>\n  Download me\n</CSVLink>;\n```\n\n- üî¨ Async + Proceed\n\n```js\nimport { CSVLink } from \"react-csv\";\n\n<CSVLink\n  data={data}\n  asyncOnClick={true}\n  onClick={(event, done) => {\n    axios.post(\"/spy/user\").then(() => {\n      done(); // REQUIRED to invoke the logic of component\n    });\n  }}\n>\n  Download me\n</CSVLink>;\n```\n\n- üî¨ Async + Don't Proceed\n\n```js\nimport { CSVLink } from \"react-csv\";\n\n<CSVLink\n  data={data}\n  asyncOnClick={true}\n  onClick={(event, done) => {\n    axios.post(\"/spy/user\").then(() => {\n      done(false); // Don't Proceed\n    });\n  }}\n>\n  Download me\n</CSVLink>;\n```\n\n## 2. CSVDownload Component:\n\nIt triggers downloading ONLY on mounting the component. so , be careful to render this component whenever it is needed.\n\nIt does not accept only `data` and `headers` props , but also , it takes advantage of all arguments of `window.open` function known that its signature is :\n\n```js\nwindow.open(ARG0, target, specs, replace);\n```\n\nThus, `target`, `specs` and `replace` Props are available .\n\n**example**\n\n```js\nimport { CSVDownload } from \"react-csv\";\n\n<CSVDownload data={data} target=\"_blank\" />;\n```\n\nFor non-node developers, they have to use CDN version :\n\n```html\n <script src=\"https://cdn.rawgit.com/abdennour/react-csv/6424b500/cdn/react-csv-latest.min.js\" type=\"text/javascript\"></script>\n\n <script type=\"text/babel\">\n   const {CSVDownload, CSVLink} = ReactCSV;// or window.ReactCSV\n\n   const element= (<CSVDownload data={data} target=\"_blank\" />);\n\n   ReactDOM.render(element, document.querySelector('#app'));\n </script>\n```\n\n# Contribution :\n\n- Unit-tests must cover at least 90% of code .\n\n- Write documentation of the new class, function, method, attribute ..so on.. following JSDoc syntax.\n\n- Add an example for the new feature to `sample-site`.\n\n- `npm start` runs the [`sample-site`](sample-site/)\n\n- `npm run docgen` generates documentation in HTML output.\n\n- `npm run cdn` generate a bundle to be used as CDN\n\n# Donation\n\nIf this project help you reduce time to develop, you can give me a cup of coffee üçµ :)\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.me/AbdennourT/2)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-csv/react-csv.git"
  },
  "scripts": {
    "cdn": "node cdn/generator.js",
    "compile": "babel -d lib/ src/ --no-comments",
    "cover": "babel-node node_modules/.bin/babel-istanbul cover node_modules/.bin/_mocha",
    "coverage": "istanbul cover _mocha -- --ui bdd -R spec -t 5000;open ./coverage/lcov-report/index.html",
    "coveralls": "npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls",
    "docgen": "documentation build  src/** -f html -o docs",
    "prepublish": "npm run compile && npm run cdn",
    "pretest": "npm run compile",
    "styleguide-build": "styleguidist build",
    "styleguide-server": "styleguidist server",
    "test": "babel-node node_modules/.bin/babel-istanbul cover node_modules/.bin/_mocha -- test/*.js",
    "test2": "_mocha test"
  },
  "version": "1.1.2"
}
