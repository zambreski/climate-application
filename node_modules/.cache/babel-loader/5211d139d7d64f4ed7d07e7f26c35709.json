{"ast":null,"code":"import _objectWithoutProperties from \"/Users/sriegodedios/Development/climate-application/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sriegodedios/Development/climate-application/src/SelectedDistrictCard.js\";\nimport React, { Component } from 'react';\nimport './weather.css';\nimport './weather0.css';\nimport { Container } from '@material-ui/core';\nimport * as ButtonStrap from 'react-bootstrap/Button';\nimport * as CardGroupStrap from 'react-bootstrap/CardGroup';\nimport * as CardStrap from 'react-bootstrap/Card';\nimport * as RowStrap from 'react-bootstrap/Row';\nimport * as ColStrap from 'react-bootstrap/Col';\nimport { getDistrictName } from './Districts'; //import {InfoIcon} from '@material-ui/icons/Info';\n\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nimport loader from './loader.gif';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n\n  const className = props.className,\n        message = props.message,\n        onClose = props.onClose,\n        variant = props.variant,\n        other = _objectWithoutProperties(props, [\"className\", \"message\", \"onClose\", \"variant\"]);\n\n  const Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }));\n}\n\nexport default class SelectedDistrictCard extends Component {\n  constructor(props) {\n    super(props);\n    this.date = new Date();\n    this.year = this.date.getFullYear();\n    var month = this.date.getMonth() + 1;\n    this.month = month < 10 ? \"0\" + month : month;\n    var day = this.date.getDate();\n    this.day = day < 10 ? \"0\" + day : day;\n    var hours = this.date.getHours();\n    this.hours = hours < 10 ? \"0\" + hours : hours;\n    var minutes = this.date.getMinutes();\n    this.minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    var seconds = this.date.getSeconds();\n    this.seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    this.dateString = this.year.toString() + this.month.toString() + this.day.toString();\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n  /*****\n   *  This function pulls data from the selected district, it will however do nothing if nothing is selected.\n   * \n   */\n\n\n  componentDidMount() {\n    /* console.log(\"Test\");\n     if(this.props.selectedDistrict)\n     {\n       console.log(\"Test\");\n       // if there's a selected district than run it.\n      \n       var station = getDistrictName(this.props.selectedDistrict);\n       var queryData = \"http://mesonet.k-state.edu/rest/stationdata/?stn=\"+station+\"&int=5min&t_start=\"+this.dateString+\"000000&t_end=\"+this.dateString+\"235959&vars=TEMP2MAVG,WSPD10MAVG,RELHUM10MAVG,PRECIP\"\n       console.log(queryData);\n       fetch(queryData)\n       .then(res => res.text())\n       .then(\n         (result) => {\n           this.setState({\n             isLoaded: true,\n             items: result\n           });\n         },\n         // Note: it's important to handle errors here\n         // instead of a catch() block so that we don't swallow\n         // exceptions from actual bugs in components.\n         (error) => {\n           this.setState({\n             isLoaded: true,\n             error\n           });\n         }\n       )\n     }*/\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    var station = getDistrictName(this.props.selectedDistrict);\n    var queryData = \"http://mesonet.k-state.edu/rest/stationdata/?stn=\" + station + \"&int=5min&t_start=\" + this.dateString + \"000000&t_end=\" + this.dateString + \"235959&vars=TEMP2MAVG,WSPD10MAVG,RELHUM10MAVG,PRECIP\";\n    console.log(queryData);\n    fetch(queryData).then(res => res.text()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    var hour = this.date.getHours();\n    var minutes = this.date.getMinutes();\n    var seconds = this.date.getSeconds();\n    var time = hour + \":\" + minutes;\n    var meridiem = \"\";\n    var descriptionOfDay = this.getDayIndicator(hour, minutes);\n    var twelveHourTime = this.get12HourTimes(hour, minutes);\n\n    if (!this.props.selectedDistrict) {\n      return React.createElement(MySnackbarContentWrapper, {\n        variant: \"info\",\n        message: \"No district selected. Please select one on the left.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      });\n    }\n\n    const _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          items = _this$state.items;\n    var selectDNum = this.props.selectedDistrict;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: loader,\n        class: \"img-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }));\n    } else {\n      var data = this.getCurrentData(items);\n      return React.createElement(CardStrap, {\n        style: {\n          backgroundColor: '#87ceeb'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(CardStrap.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \" City:\"), \" \", getDistrictName(selectDNum)), React.createElement(\"div\", {\n        class: \"night\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, descriptionOfDay, \" - \", twelveHourTime), React.createElement(\"div\", {\n        class: \"temp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, data[\"temp\"], \"\\xB0 F\"))));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sriegodedios/Development/climate-application/src/SelectedDistrictCard.js"],"names":["React","Component","Container","ButtonStrap","CardGroupStrap","CardStrap","RowStrap","ColStrap","getDistrictName","PropTypes","clsx","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","loader","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","SelectedDistrictCard","constructor","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","dateString","toString","state","isLoaded","items","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","station","selectedDistrict","queryData","console","log","fetch","then","res","text","result","setState","render","hour","time","meridiem","descriptionOfDay","getDayIndicator","twelveHourTime","get12HourTimes","selectDNum","data","getCurrentData"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './weather.css';\nimport './weather0.css';\nimport { Container } from '@material-ui/core';\nimport * as ButtonStrap from 'react-bootstrap/Button';\nimport * as CardGroupStrap from 'react-bootstrap/CardGroup';\nimport * as CardStrap from 'react-bootstrap/Card';\nimport * as RowStrap from 'react-bootstrap/Row';\nimport * as ColStrap from 'react-bootstrap/Col';\nimport {getDistrictName} from './Districts';\n//import {InfoIcon} from '@material-ui/icons/Info';\n\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nimport loader from './loader.gif';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nexport default class SelectedDistrictCard extends Component{\n  constructor(props) {\n    super(props);\n    this.date = new Date();\n    this.year = this.date.getFullYear();\n\n    var month = (this.date.getMonth()+1);    \n    this.month = month < 10 ? \"0\" + month : month;\n\n    var day = this.date.getDate();\n    this.day = day < 10 ? \"0\" + day : day;\n\n    var hours = this.date.getHours();\n    this.hours = hours < 10 ? \"0\" + hours : hours;\n\n    var minutes = this.date.getMinutes();\n    this.minutes = minutes < 10 ? \"0\" + minutes : minutes;\n\n    var seconds = this.date.getSeconds();\n    this.seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    \n    this.dateString =  this.year.toString()+this.month.toString()+this.day.toString();\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  /*****\n   *  This function pulls data from the selected district, it will however do nothing if nothing is selected.\n   * \n   */\n  componentDidMount() {\n   /* console.log(\"Test\");\n    if(this.props.selectedDistrict)\n    {\n      console.log(\"Test\");\n      // if there's a selected district than run it.\n     \n      var station = getDistrictName(this.props.selectedDistrict);\n      var queryData = \"http://mesonet.k-state.edu/rest/stationdata/?stn=\"+station+\"&int=5min&t_start=\"+this.dateString+\"000000&t_end=\"+this.dateString+\"235959&vars=TEMP2MAVG,WSPD10MAVG,RELHUM10MAVG,PRECIP\"\n      console.log(queryData);\n      fetch(queryData)\n      .then(res => res.text())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }*/\n     \n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    var station = getDistrictName(this.props.selectedDistrict);\n      var queryData = \"http://mesonet.k-state.edu/rest/stationdata/?stn=\"+station+\"&int=5min&t_start=\"+this.dateString+\"000000&t_end=\"+this.dateString+\"235959&vars=TEMP2MAVG,WSPD10MAVG,RELHUM10MAVG,PRECIP\"\n      console.log(queryData);\n      fetch(queryData)\n      .then(res => res.text())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n\n\n\n\n\n\n\n\n    render()\n    {\n      var hour = this.date.getHours();\n      var minutes = this.date.getMinutes();\n      var seconds = this.date.getSeconds();\n      var time =  hour + \":\" + minutes;\n      var meridiem = \"\";\n      var descriptionOfDay = this.getDayIndicator(hour,minutes);\n      var twelveHourTime = this.get12HourTimes(hour, minutes);\n\n      if(!this.props.selectedDistrict)\n      {\n          return (<MySnackbarContentWrapper\n              variant=\"info\"\n              message=\"No district selected. Please select one on the left.\"\n          />);\n      }\n\n      const { error, isLoaded, items } = this.state;\n      var selectDNum = this.props.selectedDistrict;\n\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div><img src={loader} class=\"img-fluid\" /></div>;\n      } else {\n        \n        var data = this.getCurrentData(items);\n        return(\n            <CardStrap style={{backgroundColor: '#87ceeb'}}>\n              <CardStrap.Body>\n                <div class=\"info\">\n                    <div class=\"city\"><span> City:</span> {getDistrictName(selectDNum)}</div>\n                    <div class=\"night\">{descriptionOfDay} - {twelveHourTime}</div>\n                    <div class=\"temp\">{data[\"temp\"]}° F</div>\n                </div>\n              </CardStrap.Body>\n            </CardStrap>);\n      }\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}