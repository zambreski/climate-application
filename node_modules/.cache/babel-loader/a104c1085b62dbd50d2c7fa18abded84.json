{"ast":null,"code":"var _jsxFileName = \"/Users/sriegodedios/Development/senior project/src/GraphRender.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, VerticalRectSeries, VerticalBarSeriesCanvas } from 'react-vis';\nimport { makeWidthFlexible } from 'react-vis';\nimport { getAsic } from './Districts';\nimport loader from './loader.gif';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nconst myDATA = [{\n  id: '00036',\n  y: 200400,\n  x: 1504121437\n}, {\n  id: '00036',\n  y: 200350,\n  x: 1504121156\n}, {\n  id: '00036',\n  y: 200310,\n  x: 1504120874\n}, {\n  id: '00036',\n  y: 200260,\n  x: 1504120590\n}, {\n  id: '00036',\n  y: 200210,\n  x: 1504120306\n}, {\n  id: '00036',\n  y: 200160,\n  x: 1504120024\n}, {\n  id: '00036',\n  y: 200120,\n  x: 1504119740\n}, {\n  id: '00036',\n  y: 200070,\n  x: 1504119458\n}, {\n  id: '00036',\n  y: 200020,\n  x: 1504119177\n}, {\n  id: '00036',\n  y: 199980,\n  x: 1504118893\n}, {\n  id: '00036',\n  y: 199930,\n  x: 1504118611\n}, {\n  id: '00036',\n  y: 199880,\n  x: 1504118330\n}, {\n  id: '00036',\n  y: 199830,\n  x: 1504118048\n}, {\n  id: '00036',\n  y: 199790,\n  x: 1504117763\n}, {\n  id: '00036',\n  y: 199740,\n  x: 1504117481\n}];\nconst ONE_DAY = 86400000;\nexport default class GraphRender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: {}\n    };\n  }\n\n  componentWillUpdate(newProps) {\n    var elem = \"maxt\";\n\n    if (this.props.selectedGraphType) {\n      elem = \"pcpn\";\n    }\n\n    this.state.items = {};\n    this.state.isLoaded = false;\n    var queryData = \"http://data.rcc-acis.org/StnData?sid=\" + getAsic(this.props.asicStation)[1] + \"&sdate=\" + this.props.selectedStartDate + \"&edate=\" + this.props.selectedEndDate + \"&elems=\" + elem + \"&output=json\";\n    console.log(\"This query data: \" + queryData);\n    fetch(queryData).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.data\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    var y_axis = \"Temperature (Â°F)\";\n\n    if (this.props.selectedGraphType) {\n      y_axis = \"Percipitation (inches)\";\n    }\n\n    var data = [];\n    var csvData = [[\"Date\", y_axis]];\n\n    for (var i = 0; i < this.state.items.length; i++) {\n      var obj = this.state.items[i];\n      csvData.push([new Date(obj[0]), obj[1]]);\n    }\n\n    console.log(\"DATA: \" + csvData); // console.log(data)\n\n    if (this.state.isLoaded) {\n      if (this.props.selectedGraphType) {\n        // For percipitation bar graph\n        for (var i = 0; i < this.state.items.length; i++) {\n          var obj = this.state.items[i];\n\n          if (obj[1] != 'M' || obj[1] != 'T') {\n            var timestamp = new Date(obj[0]).getTime;\n            data.push({\n              id: timestamp,\n              x: new Date(obj[0]),\n              y: obj[1]\n            });\n          }\n\n          var yDomain = data.reduce((res, row) => {\n            return {\n              max: Math.max(res.max, row.y),\n              min: Math.min(res.min, row.y)\n            };\n          }, {\n            max: -Infinity,\n            min: Infinity\n          });\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Station: \", getAsic(this.props.asicStation)[0], \" Data Preview\", React.createElement(XYPlot, {\n          margin: {\n            left: 75\n          },\n          xType: \"time\",\n          height: 300,\n          width: 1100,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(VerticalRectSeries, {\n          className: \"vertical-bar-series-example\",\n          data: data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }), React.createElement(XAxis, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }), React.createElement(YAxis, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        })));\n      } else {\n        // For temperature graph\n        for (var i = 0; i < this.state.items.length; i++) {\n          var obj = this.state.items[i];\n\n          if (obj[1] != 'M' || obj[1] != 'T') {\n            data.push({\n              x: new Date(obj[0]),\n              y: obj[1]\n            });\n          }\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \"Station: \", getAsic(this.props.asicStation)[0], \" Data Preview\", React.createElement(XYPlot, {\n          height: 300,\n          width: 1100,\n          xType: \"time\",\n          title: \"Average Temperature\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(VerticalGridLines, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }), React.createElement(HorizontalGridLines, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }), React.createElement(XAxis, {\n          title: \"Dates from \" + this.props.selectedStartDate + \" to \" + this.props.selectedEndDate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }), React.createElement(YAxis, {\n          title: y_axis,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }), React.createElement(LineSeries, {\n          data: data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        })), React.createElement(CSVLink, {\n          data: csvData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, \"Download Data\"));\n      }\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: loader,\n        class: \"img-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sriegodedios/Development/senior project/src/GraphRender.js"],"names":["React","Component","XYPlot","LineSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","VerticalRectSeries","VerticalBarSeriesCanvas","makeWidthFlexible","getAsic","loader","CSVLink","CSVDownload","myDATA","id","y","x","ONE_DAY","GraphRender","constructor","props","state","isLoaded","items","componentWillUpdate","newProps","elem","selectedGraphType","queryData","asicStation","selectedStartDate","selectedEndDate","console","log","fetch","then","res","json","result","setState","data","error","render","y_axis","csvData","i","length","obj","push","Date","timestamp","getTime","yDomain","reduce","row","max","Math","min","Infinity","left"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, VerticalRectSeries,VerticalBarSeriesCanvas} from 'react-vis';\nimport {\n  makeWidthFlexible,\n} from 'react-vis';\nimport {getAsic} from './Districts';\nimport loader from './loader.gif';\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nconst myDATA = [\n  {id: '00036', y: 200400, x: 1504121437},\n  {id: '00036', y: 200350, x: 1504121156},\n  {id: '00036', y: 200310, x: 1504120874},\n  {id: '00036', y: 200260, x: 1504120590},\n  {id: '00036', y: 200210, x: 1504120306},\n  {id: '00036', y: 200160, x: 1504120024},\n  {id: '00036', y: 200120, x: 1504119740},\n  {id: '00036', y: 200070, x: 1504119458},\n  {id: '00036', y: 200020, x: 1504119177},\n  {id: '00036', y: 199980, x: 1504118893},\n  {id: '00036', y: 199930, x: 1504118611},\n  {id: '00036', y: 199880, x: 1504118330},\n  {id: '00036', y: 199830, x: 1504118048},\n  {id: '00036', y: 199790, x: 1504117763},\n  {id: '00036', y: 199740, x: 1504117481}\n];\n\nconst ONE_DAY = 86400000;\n\n\nexport default class GraphRender extends Component{\n    constructor(props)\n    {\n      super(props);\n      this.state = {\n        isLoaded:false,\n        items:{}\n      }\n    }\n\n    componentWillUpdate(newProps)\n    {\n      var elem = \"maxt\"\n      if(this.props.selectedGraphType)\n      {\n        elem=\"pcpn\"\n      }\n\n      this.state.items = {}\n      this.state.isLoaded = false;\n      var queryData = \"http://data.rcc-acis.org/StnData?sid=\"+(getAsic(this.props.asicStation)[1])+\"&sdate=\"+this.props.selectedStartDate+\"&edate=\"+this.props.selectedEndDate+\"&elems=\"+elem+\"&output=json\"\n      console.log(\"This query data: \"+queryData)\n      fetch(queryData)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.data\n          });       \n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n      \n    }\n\n   \n\n\n    render()\n    {\n      var y_axis = \"Temperature (Â°F)\"\n\n      if(this.props.selectedGraphType)\n      {\n        y_axis = \"Percipitation (inches)\"\n      }\n      var data = []\n\n      var csvData = [\n        [\"Date\", y_axis]\n      ]\n\n      for(var i = 0; i < this.state.items.length; i++) {\n        var obj = this.state.items[i];\n        csvData.push([new Date(obj[0]), obj[1]])\n      }\n\n      console.log(\"DATA: \"+csvData);\n\n     // console.log(data)\n\n      if(this.state.isLoaded)\n      {\n\n        if(this.props.selectedGraphType)\n        {\n          // For percipitation bar graph\n          for(var i = 0; i < this.state.items.length; i++) {\n            var obj = this.state.items[i];\n            if(obj[1] != 'M' || obj[1] != 'T')\n            {\n              var timestamp = new Date(obj[0]).getTime\n\n              data.push({id: timestamp, x: new Date(obj[0]), y: obj[1]});\n            }\n\n            var yDomain = data.reduce(\n              (res, row) => {\n                return {\n                  max: Math.max(res.max, row.y),\n                  min: Math.min(res.min, row.y)\n                };\n              },\n              {max: -Infinity, min: Infinity}\n            );\n            \n          }\n          \n          return(\n                <div>\n                Station: {getAsic(this.props.asicStation)[0]} Data Preview\n                <XYPlot\n              margin={{left: 75}}\n              xType=\"time\"\n              height={300}\n              width= {1100}\n              \n            >\n              <VerticalRectSeries className=\"vertical-bar-series-example\" data={data} />\n              <XAxis />\n              <YAxis />\n            </XYPlot>\n            </div>\n              \n           );\n          \n        }else{\n          // For temperature graph\n\n          for(var i = 0; i < this.state.items.length; i++) {\n            var obj = this.state.items[i];\n            if(obj[1] != 'M' || obj[1] != 'T')\n            {\n              data.push({x: new Date(obj[0]), y: obj[1]});\n            }\n            \n          }\n\n          return(\n            <div>\n             Station: {getAsic(this.props.asicStation)[0]} Data Preview\n             <XYPlot height={300} width= {1100}  xType=\"time\" title=\"Average Temperature\">        \n                     <VerticalGridLines />\n                     <HorizontalGridLines />\n                     <XAxis title={\"Dates from \"+ this.props.selectedStartDate+\" to \"+ this.props.selectedEndDate}/>\n                     <YAxis title={y_axis}/>\n                     <LineSeries  data={data}/>\n             </XYPlot >\n             <CSVLink data={csvData}>Download Data</CSVLink>\n            </div>\n              \n           );\n\n\n        }\n\n       \n      }else{\n        return(<div><img src={loader} class=\"img-fluid\" /></div>)\n      }\n      \n\n\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}