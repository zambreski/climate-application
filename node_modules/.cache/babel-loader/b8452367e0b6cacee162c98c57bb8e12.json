{"ast":null,"code":"var _jsxFileName = \"/Users/sriegodedios/Development/climate-application/src/GraphRender.js\";\nimport React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport { XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\nimport { makeWidthFlexible } from 'react-vis';\nimport { getAsic } from './Districts';\nimport loader from './loader.gif';\nexport default class GraphRender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: {}\n    };\n  }\n\n  componentWillUpdate(newProps) {\n    var elem = \"maxt\";\n\n    if (this.props.selectedGraphType) {\n      elem = \"pcpn\";\n    }\n\n    this.state.items = {};\n    this.state.isLoaded = false;\n    var queryData = \"http://data.rcc-acis.org/StnData?sid=\" + getAsic(this.props.asicStation)[1] + \"&sdate=\" + this.props.selectedStartDate + \"&edate=\" + this.props.selectedEndDate + \"&elems=\" + elem + \"&output=json\";\n    console.log(\"This query data: \" + queryData);\n    fetch(queryData).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.data\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    var y_axis = \"Temperature (°F)\";\n\n    if (this.props.selectedGraphType) {\n      y_axis = \"Percipitation (inches)\";\n    }\n\n    var data = [];\n\n    for (var i = 0; i < this.state.items.length; i++) {\n      var obj = this.state.items[i];\n      data.push({\n        x: new Date(obj[0]),\n        y: obj[1]\n      });\n    }\n\n    console.log(data);\n\n    if (this.state.isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, getAsic(this.props.asicStation)[0], React.createElement(XYPlot, {\n        height: 300,\n        width: 1100,\n        xType: \"time\",\n        title: \"Average Temperature\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(VerticalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(HorizontalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        title: \"Dates from \" + this.props.selectedStartDate + \" to \" + this.props.selectedEndDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        title: y_axis,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(LineSeries, {\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: loader,\n        class: \"img-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sriegodedios/Development/climate-application/src/GraphRender.js"],"names":["React","Component","XYPlot","LineSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","makeWidthFlexible","getAsic","loader","GraphRender","constructor","props","state","isLoaded","items","componentWillUpdate","newProps","elem","selectedGraphType","queryData","asicStation","selectedStartDate","selectedEndDate","console","log","fetch","then","res","json","result","setState","data","error","render","y_axis","i","length","obj","push","x","Date","y"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis} from 'react-vis';\nimport {\n  makeWidthFlexible,\n} from 'react-vis';\nimport {getAsic} from './Districts';\nimport loader from './loader.gif';\n\n\nexport default class GraphRender extends Component{\n    constructor(props)\n    {\n      super(props);\n      this.state = {\n        isLoaded:false,\n        items:{}\n      }\n    }\n\n    componentWillUpdate(newProps)\n    {\n      var elem = \"maxt\"\n      if(this.props.selectedGraphType)\n      {\n        elem=\"pcpn\"\n      }\n\n      this.state.items = {}\n      this.state.isLoaded = false;\n      var queryData = \"http://data.rcc-acis.org/StnData?sid=\"+(getAsic(this.props.asicStation)[1])+\"&sdate=\"+this.props.selectedStartDate+\"&edate=\"+this.props.selectedEndDate+\"&elems=\"+elem+\"&output=json\"\n      console.log(\"This query data: \"+queryData)\n      fetch(queryData)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.data\n          });       \n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n      \n    }\n\n   \n\n\n    render()\n    {\n      var y_axis = \"Temperature (°F)\"\n\n      if(this.props.selectedGraphType)\n      {\n        y_axis = \"Percipitation (inches)\"\n      }\n      var data = []\n\n\n\n      for(var i = 0; i < this.state.items.length; i++) {\n        var obj = this.state.items[i];\n    \n        data.push({x: new Date(obj[0]), y: obj[1]});\n      }\n\n      console.log(data)\n\n      if(this.state.isLoaded)\n      {\n        return(\n          <div>\n            {getAsic(this.props.asicStation)[0]}\n           <XYPlot height={300} width= {1100}  xType=\"time\" title=\"Average Temperature\">        \n                   <VerticalGridLines />\n                   <HorizontalGridLines />\n                   <XAxis title={\"Dates from \"+ this.props.selectedStartDate+\" to \"+ this.props.selectedEndDate}/>\n                   <YAxis title={y_axis}/>\n                   <LineSeries data={data}/>\n           </XYPlot >\n          </div>\n            \n         );\n      }else{\n        return(<div><img src={loader} class=\"img-fluid\" /></div>)\n      }\n      \n\n\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}